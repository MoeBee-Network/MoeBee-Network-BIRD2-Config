include "predefined.conf";
include "regions.conf";
include "no_as_loop.conf";
include "rpki.conf";


function delete_last(int lastval){
    bgp_large_community.delete([(MY_COMMUNITY,  1, lastval),
                                (MY_COMMUNITY,  2, lastval),
                                (MY_COMMUNITY,  3, lastval),
                                (MY_COMMUNITY,  4, lastval),
                                (MY_COMMUNITY,  5, lastval),
                                (MY_COMMUNITY,101, lastval),
                                (MY_COMMUNITY,201, lastval),
                                (MY_COMMUNITY,202, lastval),
                                (MY_COMMUNITY,203, lastval),
                                (MY_COMMUNITY,204, lastval),
                                (MY_COMMUNITY,209, lastval)]);
}

function add_geoinfo()
{
    bgp_large_community.add((MY_COMMUNITY,10000,MY_REGION));
    bgp_large_community.add((MY_COMMUNITY,10001,MY_COUNTRY));
    if (MY_COMMUNITY,1019,0) !~ bgp_large_community then {
        bgp_large_community.add((MY_COMMUNITY,1010,0));
        bgp_large_community.add((MY_COMMUNITY,1011,MY_REGION));
    }
}

function prepend_self_pow(int prepend_pow){
    if prepend_pow = 1 then {
        bgp_path.prepend(LOCAL_ASN);
    }
    if prepend_pow = 2 then {
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
    }
    if prepend_pow = 4 then {
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
    }
    if prepend_pow = 8 then {
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
        bgp_path.prepend(LOCAL_ASN);
    }
}

function prepend_self(int prepend_num){
    if prepend_num = 1 then {
        prepend_self_pow(1);
    }
    if prepend_num = 2 then {
        prepend_self_pow(2);
    }
    if prepend_num = 3 then {
        prepend_self_pow(1);
        prepend_self_pow(2);
    }
    if prepend_num = 4 then {
        prepend_self_pow(4);
    }
    if prepend_num = 5 then {
        prepend_self_pow(1);
        prepend_self_pow(4);
    }
    if prepend_num = 6 then {
        prepend_self_pow(2);
        prepend_self_pow(4);
    }
    if prepend_num = 7 then {
        prepend_self_pow(1);
        prepend_self_pow(2);
        prepend_self_pow(4);
    }
    if prepend_num = 8 then {
        prepend_self_pow(8);
    }
}

# 204
# · downstream this_node    = 300
# · downstream MY_COUNTRY   = 280
# · downstream MY_REGION    = 260
# · downstream other        = 130
# 203
# · peer this_node          = 200
# · peer MY_COUNTRY         = 190
# · peer MY_REGION          = 180
# · peer other              = 130
# 202
# · ixrs this_node          = 180
# · ixrs MY_COUNTRY         = 170
# · ixrs MY_REGION          = 160
# · ixrs other              = 130
# 201
# · transit this_node       = 140
# · transit MY_COUNTRY      = 120
# · transit MY_REGION       = 110
# · transit other           = 100
function ibgp_pref(){
    if (MY_COMMUNITY, 101, 0) ~ bgp_large_community then return true;
    if bgp_large_community ~ [(MY_COMMUNITY,  204,*)] then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=300;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community then {
            bgp_local_pref=280;
        } else if (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=260;
        }
        bgp_local_pref=130;
    } else if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=200;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community then {
            bgp_local_pref=190;
        } else if (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=180;
        }
        bgp_local_pref=130;
    } else if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=180;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community then {
            bgp_local_pref=170;
        } else if (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=160;
        }
        bgp_local_pref=130;
    } else if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then {
        if ((MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community && (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community) then {
            bgp_local_pref=140;
        } else if (MY_COMMUNITY, 10001, MY_COUNTRY) ~ bgp_large_community then {
            bgp_local_pref=120;
        } else if (MY_COMMUNITY, 10000, MY_REGION) ~ bgp_large_community then {
            bgp_local_pref=110;
        }
        bgp_local_pref=100;
    }
}


function add_type(string peer_type)
int neighbor_asn;
{
    if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="ibgp" || peer_type="grc") then {        print "bgp_import: unknown peer_type:", peer_type;
        reject;
    }
    if bgp_path.len > 0 then{
        neighbor_asn = bgp_path.first;
    } else {
        neighbor_asn = LOCAL_ASN;
    }

    if (peer_type = "upstream" || ( neighbor_asn ~ t1_asns && ( peer_type = "ixrs" || peer_type = "peer" ))) then {
        bgp_local_pref=140;
        bgp_large_community.add((MY_COMMUNITY, 201 ,0));
    } else if peer_type = "ixrs" then {
        bgp_local_pref=180;
        bgp_large_community.add((MY_COMMUNITY, 202 ,0));
        if neighbor_asn !~ t1_asns && bgp_path ~ t1_asns then reject; # reject t1_asns
    } else if peer_type = "peer" then {
        bgp_local_pref=200;
        bgp_large_community.add((MY_COMMUNITY, 203 ,0));
        if neighbor_asn !~ t1_asns && bgp_path ~ t1_asns then reject; # reject t1_asns
    } else if peer_type = "downstream" then {
        bgp_local_pref=300;
        bgp_large_community.add((MY_COMMUNITY, 204 ,0));
        if bgp_path ~ t1_asns then reject;
        if !no_as_loop(false) then reject;
    } else if peer_type = "ibgp" then {
        bgp_large_community.add((MY_COMMUNITY, 209 ,1));
    } else if peer_type = "grc" then {
        reject;
    }
}

function type_filter(int peer_asn; string peer_type) {
    if !(peer_type = "upstream" || peer_type="ixrs" || peer_type="peer" || peer_type="downstream" || peer_type="grc" || peer_type="ibgp") then {
        print "bgp_import: invalid peer_type";
        reject;
    }
    if peer_type = "upstream" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ t1_asns then reject;                              # reject T1 routes
        if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "ixrs" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ t1_asns then reject;                              # reject T1 routes
        if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "peer" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_large_community ~ [(MY_COMMUNITY,  202,*)] then reject;  # no ixrs routes
        if bgp_large_community ~ [(MY_COMMUNITY,  203,*)] then reject;  # no peer routes
        if bgp_path ~ t1_asns then reject;                              # reject T1 routes
        if bgp_large_community !~ [(MY_COMMUNITY,  204,*)] then reject; # reject non-downstream routes
    } else if peer_type = "downstream" then {
        # export all routes to downstream
    } else if peer_type = "ibgp" then {
        # export all routes to ibgp
    } else if peer_type = "grc" then {
        if bgp_large_community ~ [(MY_COMMUNITY,  201,*)] then reject;  # no transit routes
        if bgp_path ~ t1_asns then reject;
    }
}

function should_do_action (int action_base; int peer_asn; string peer_type)
int action_to_all_asn;
int action_not_to_asn;
int action_to_asn;
int action_to_all_region;
int action_not_to_region;
int action_to_region;
int action_to_all_country;
int action_not_to_country;
int action_to_country;
int action_to_peer_type;
{
    action_to_all_asn     = action_base;
    action_not_to_asn     = action_base + 1;
    action_to_asn         = action_base + 2;
    action_to_all_region  = action_base + 10;
    action_not_to_region  = action_base + 11;
    action_to_region      = action_base + 12;
    action_to_all_country = action_base + 20;
    action_not_to_country = action_base + 21;
    action_to_country     = action_base + 22;
    action_to_peer_type   = action_base + 30;
    if (MY_COMMUNITY, action_to_asn, peer_asn) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_asn, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_asn, peer_asn) !~ bgp_large_community )then {
        return true;
    }
    if (MY_COMMUNITY, action_to_region, MY_REGION) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_region, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_region, MY_REGION) !~ bgp_large_community )then {
        if !(action_base = 1000 && peer_type = "downstream" ) then {
            return true; # reject on region is not valid on downstream session
        }
    }
    if (MY_COMMUNITY, action_to_country, MY_COUNTRY) ~ bgp_large_community || ( (MY_COMMUNITY, action_to_all_country, 0) ~ bgp_large_community && (MY_COMMUNITY, action_not_to_country, MY_COUNTRY) !~ bgp_large_community )then {
        if !(action_base = 1000 && peer_type = "downstream" ) then {
            return true; # reject on country is not valid on downstream session
        }
    }
    if (MY_COMMUNITY, action_to_peer_type, 1) ~ bgp_large_community && peer_type = "upstream"   then return true;
    if (MY_COMMUNITY, action_to_peer_type, 2) ~ bgp_large_community && peer_type = "ixrs"       then return true;
    if (MY_COMMUNITY, action_to_peer_type, 3) ~ bgp_large_community && peer_type = "peer"       then return true;
    if (MY_COMMUNITY, action_to_peer_type, 4) ~ bgp_large_community && peer_type = "downstream" then return true;
    if (MY_COMMUNITY, action_to_peer_type, 8) ~ bgp_large_community && peer_type = "grc"        then return true;
    return false;
}

function do_control_action(int peer_asn; string peer_type){
    # Implement (MY_COMMUNITY,10__,0)   do not send to XXX
    if should_do_action(1000, peer_asn, peer_type) then {
        reject;
    }
    # Implement (MY_COMMUNITY,11__,0)   prepend 1 to XXX
    if should_do_action(1100, peer_asn, peer_type) then {
        prepend_self(1);
    }
    # Implement (MY_COMMUNITY,12__,0)   prepend 2 to XXX
    if should_do_action(1200, peer_asn, peer_type) then {
        prepend_self(2);
    }
    # Implement (MY_COMMUNITY,14__,0)   prepend 4 to XXX
    if should_do_action(1400, peer_asn, peer_type) then {
        prepend_self(4);
    }
    # Implement (MY_COMMUNITY,18__,0)   prepend 8 to XXX
    if should_do_action(1800, peer_asn, peer_type) then {
        prepend_self(8);
    }
}

function path_whitelist(int set allowed_path)
{
    if delete(bgp_path,allowed_path).len > 0 then reject;
}

function net_whitelist(prefix set prefix_whitelist)
{
    if net !~ prefix_whitelist then {
        print bgp_path.first, ": filtered ", net, "are not in prefix_whitelist";
        reject;
    }
}

function ebgp_import(int peer_asn; string peer_type; int prepend_num; prefix set prefix_whitelist; int set asn_whitelist){
    if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
    bgp_large_community.delete([(MY_COMMUNITY, 0..999, *)]);
    bgp_large_community.delete([(MY_COMMUNITY, 10000..99999, *)]);
    prepend_self(prepend_num);
    add_geoinfo();
    add_type(peer_type);
    net_whitelist(prefix_whitelist);
    do_rpki_check();
    if 0 !~ asn_whitelist then {
        path_whitelist(asn_whitelist);
    }
    return true;
}

function ebgp_export(int peer_asn; string peer_type; int prepend_num; prefix set prefix_whitelist;  int set asn_whitelist) {
    if is_bogon_prefix() || is_default() || not_allowed() || (bgp_path.len > 100) then reject;
    if source ~ [ RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ] then reject;
    if bgp_large_community ~ [(MY_COMMUNITY,  2,*)] then reject; # Implement (asn, 2,*)   do not send to ebgp
    type_filter(peer_asn, peer_type);
    prepend_self(prepend_num);
    do_control_action(peer_asn, peer_type);
    bgp_large_community.delete([(MY_COMMUNITY, 0..9999 , *)]);
    net_whitelist(prefix_whitelist);
    if 0 !~ asn_whitelist then {
        path_whitelist(asn_whitelist);
    }
    return true;
};

function ibgp_import() { 
    ibgp_pref();
    return true;
    
};
function ibgp_export() {
    if source ~ [ RTS_OSPF, RTS_OSPF_IA, RTS_OSPF_EXT1, RTS_OSPF_EXT2 ] then reject;
    delete_last(1);
    if bgp_large_community ~ [(MY_COMMUNITY,  1,*)] then reject; # Implement (asn, 1,*)   do not send to ibgp
    add_geoinfo();
    bgp_large_community.add((MY_COMMUNITY,10000,MY_REGION));
    bgp_large_community.add((MY_COMMUNITY,10001,MY_COUNTRY));
    return true;
};

function rr_import(int peer_region; int peer_country){
    return true;
}

function rr_export(lclist transit_regions; lclist transit_countries) {
    add_type("ibgp");
    if (bgp_large_community ~ [(MY_COMMUNITY,  201,*)] || bgp_path ~ t1_asns ) then { # transit routes
        if !(bgp_large_community ~ transit_regions && bgp_large_community ~ transit_countries) then {
            reject;
        }
    }
    return true;
};
